const moment = require("moment-timezone");

module.exports.config = {
  name: "autotime",
  version: "7.0.0",
  hasPermssion: 2,
  credits: "Saiful",
  description: "‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶≤‡ßá‡¶á ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶Ø‡¶º, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶ì ‡¶¶‡ßã‡ßü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá",
  commandCategory: "system",
  usages: "autotime",
  cooldowns: 5,
};

const runningGroups = new Set();

// ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡¶æ‡¶∏ ‡¶ì ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
const banglaMonths = [
  "‡¶¨‡ßà‡¶∂‡¶æ‡¶ñ", "‡¶ú‡ßç‡¶Ø‡ßà‡¶∑‡ßç‡¶†", "‡¶Ü‡¶∑‡¶æ‡¶¢‡¶º", "‡¶∂‡ßç‡¶∞‡¶æ‡¶¨‡¶£", "‡¶≠‡¶æ‡¶¶‡ßç‡¶∞", "‡¶Ü‡¶∂‡ßç‡¶¨‡¶ø‡¶®",
  "‡¶ï‡¶æ‡¶∞‡ßç‡¶§‡¶ø‡¶ï", "‡¶Ö‡¶ó‡ßç‡¶∞‡¶π‡¶æ‡¶Ø‡¶º‡¶£", "‡¶™‡ßå‡¶∑", "‡¶Æ‡¶æ‡¶ò", "‡¶´‡¶æ‡¶≤‡ßç‡¶ó‡ßÅ‡¶®", "‡¶ö‡ßà‡¶§‡ßç‡¶∞"
];

const banglaWeekdays = [
  "‡¶∞‡¶¨‡¶ø‡¶¨‡¶æ‡¶∞", "‡¶∏‡ßã‡¶Æ‡¶¨‡¶æ‡¶∞", "‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤‡¶¨‡¶æ‡¶∞",
  "‡¶¨‡ßÅ‡¶ß‡¶¨‡¶æ‡¶∞", "‡¶¨‡ßÉ‡¶π‡¶∏‡ßç‡¶™‡¶§‡¶ø‡¶¨‡¶æ‡¶∞", "‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞‡¶¨‡¶æ‡¶∞", "‡¶∂‡¶®‡¶ø‡¶¨‡¶æ‡¶∞"
];

const banglaDigits = ["‡ß¶","‡ßß","‡ß®","‡ß©","‡ß™","‡ß´","‡ß¨","‡ß≠","‡ßÆ","‡ßØ"];

// ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞
function toBanglaNumber(num) {
  return num.toString().replace(/\d/g, d => banglaDigits[d]);
}

// ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶ó‡¶£‡¶®‡¶æ (‡¶∏‡¶†‡¶ø‡¶ï)
function getBanglaDate(now) {
  const gYear = now.year();
  const gMonth = now.month() + 1; // 1-12
  const gDay = now.date();

  // Pohela Boishakh: 14 April (14-04) ‡¶ó‡ßç‡¶∞‡ßá‡¶ó‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶®
  let banglaYear = gYear - 593;
  let dayOfYear = moment(now).dayOfYear();
  let pohelaBoishakh = moment(`${gYear}-04-14`, "YYYY-MM-DD").dayOfYear();

  if (dayOfYear < pohelaBoishakh) {
    banglaYear--;
    pohelaBoishakh = moment(`${gYear-1}-04-14`, "YYYY-MM-DD").dayOfYear();
  }

  let dayCount = dayOfYear - pohelaBoishakh + 1;
  if (dayCount <= 0) dayCount += moment(`${gYear}-12-31`, "YYYY-MM-DD").dayOfYear();

  // ‡¶Æ‡¶æ‡¶∏‡ßá‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ
  const monthLengths = [31,31,31,31,31,30,30,30,30,30,30,30]; // Approximate
  let monthIndex = 0;
  while(dayCount > monthLengths[monthIndex]) {
    dayCount -= monthLengths[monthIndex];
    monthIndex = (monthIndex + 1) % 12;
  }

  const weekday = banglaWeekdays[now.day()];

  return {
    day: toBanglaNumber(dayCount),
    month: banglaMonths[monthIndex],
    year: toBanglaNumber(banglaYear),
    weekday
  };
}

function sendTime(api, threadID) {
  if (!runningGroups.has(threadID)) return;

  const timeZone = "Asia/Dhaka";
  const now = moment().tz(timeZone);
  const time = now.format("hh:mm A");
  const date = now.format("DD/MM/YYYY, dddd");
  const bangla = getBanglaDate(now);

  const msg = `
‚ïî‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ïó
 ‚è∞ ùóßùóúùó†ùóò & ùóóùóîùóßùóò ‚è∞
‚ïö‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ïù
    ‚ïî‚ïê‚ú™‚ïêüïí‚ïê‚ú™‚ïê‚ïó
    ‡¶∏‡¶Æ‡ßü: ${time}
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
üìÖ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${date}
üóìÔ∏è ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${bangla.day} ${bangla.month}, ${bangla.year} (${bangla.weekday})
üåç ‡¶ü‡¶æ‡¶á‡¶Æ‡¶ú‡ßã‡¶®: ${timeZone}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú® ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶∞ ‡¶®‡¶ø‡¶ï‡¶ü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¶‡ßã‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®..! 
üôè ‡ß´ ‡¶ì‡ßü‡¶æ‡¶ï‡ßç‡¶§ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶®‡¶ø‡ßü‡¶Æ‡¶ø‡¶§ ‡¶™‡ßú‡ßÅ‡¶®..!
ü§ù ‡¶∏‡¶ï‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶¶‡ßç‡¶≠‡¶æ‡¶¨ ‡¶¨‡¶ú‡¶æ‡ßü ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®..!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üå∏‚ú®üåôüïäÔ∏èüåºüåøüïåüíñüåôüå∏‚ú®üå∫

üåü ùêÇùê´ùêûùêöùê≠ùê®ùê´ ‚îÅ ùêíùêöùê¢ùêüùêÆùê• ùêàùê¨ùê•ùêöùê¶ üåü
`;

  api.sendMessage(msg, threadID);
}

// ‡¶∞‡¶æ‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶è‡¶ï‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
module.exports.run = async function ({ api, event }) {
  const threadID = event.threadID;

  if (runningGroups.has(threadID)) {
    return api.sendMessage("‚è∞ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá AutoTime ‡¶ö‡¶≤‡¶õ‡ßá!", threadID);
  }

  runningGroups.add(threadID);
  api.sendMessage("‚úÖ ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶∏‡¶Æ‡ßü, ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶ì ‡¶¶‡ßã‡ßü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§", threadID);

  const timeZone = "Asia/Dhaka";
  const now = moment().tz(timeZone);
  const nextHour = now.clone().add(1, "hour").startOf("hour");
  let delay = nextHour.diff(now);

  setTimeout(function tick() {
    if (!runningGroups.has(threadID)) return;

    sendTime(api, threadID);

    setInterval(() => {
      if (!runningGroups.has(threadID)) return;
      sendTime(api, threadID);
    }, 60 * 60 * 1000);

  }, delay);
};

module.exports.handleEvent = async function ({ api, event }) {
  const threadID = event.threadID;

  if (!runningGroups.has(threadID)) {
    runningGroups.add(threadID);

    const timeZone = "Asia/Dhaka";
    const now = moment().tz(timeZone);
    const nextHour = now.clone().add(1, "hour").startOf("hour");
    let delay = nextHour.diff(now);

    setTimeout(function tick() {
      if (!runningGroups.has(threadID)) return;

      sendTime(api, threadID);

      setInterval(() => {
        if (!runningGroups.has(threadID)) return;
        sendTime(api, threadID);
      }, 60 * 60 * 1000);

    }, delay);
  }
};
