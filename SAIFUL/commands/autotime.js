const axios = require("axios");
const moment = require("moment-timezone");
require("moment/locale/bn");

module.exports.config = {
  name: "autotime",
  version: "1.4.1",
  hasPermssion: 0,
  credits: "Sairul Islam (modified)",
  description: "Auto time hourly update (Bangla, English & Hijri, Default ON)",
  commandCategory: "Utility",
  cooldowns: 5,
};

const banglaMonths = [
  "‡¶¨‡ßà‡¶∂‡¶æ‡¶ñ", "‡¶ú‡ßç‡¶Ø‡ßà‡¶∑‡ßç‡¶†", "‡¶Ü‡¶∑‡¶æ‡¶¢‡¶º", "‡¶∂‡ßç‡¶∞‡¶æ‡¶¨‡¶£", "‡¶≠‡¶æ‡¶¶‡ßç‡¶∞", "‡¶Ü‡¶∂‡ßç‡¶¨‡¶ø‡¶®",
  "‡¶ï‡¶æ‡¶∞‡ßç‡¶§‡¶ø‡¶ï", "‡¶Ö‡¶ó‡ßç‡¶∞‡¶π‡¶æ‡¶Ø‡¶º‡¶£", "‡¶™‡ßå‡¶∑", "‡¶Æ‡¶æ‡¶ò", "‡¶´‡¶æ‡¶≤‡ßç‡¶ó‡ßÅ‡¶®", "‡¶ö‡ßà‡¶§‡ßç‡¶∞"
];

const banglaDays = [
  "‡¶∞‡¶¨‡¶ø‡¶¨‡¶æ‡¶∞", "‡¶∏‡ßã‡¶Æ‡¶¨‡¶æ‡¶∞", "‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤‡¶¨‡¶æ‡¶∞", "‡¶¨‡ßÅ‡¶ß‡¶¨‡¶æ‡¶∞",
  "‡¶¨‡ßÉ‡¶π‡¶∏‡ßç‡¶™‡¶§‡¶ø‡¶¨‡¶æ‡¶∞", "‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞‡¶¨‡¶æ‡¶∞", "‡¶∂‡¶®‡¶ø‡¶¨‡¶æ‡¶∞"
];

// ‡¶è‡¶ï‡¶ü‡¶ø map ‡¶Ø‡¶æ‡¶§‡ßá ‡¶•‡ßç‡¶∞‡ßá‡¶°ÎßàÎã§ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶ö‡¶≤‡¶¨‡ßá
let timers = {};

/** Convert English digits to Bangla digits */
function toBanglaNumber(str) {
  const map = { "0":"‡ß¶","1":"‡ßß","2":"‡ß®","3":"‡ß©","4":"‡ß™","5":"‡ß´","6":"‡ß¨","7":"‡ß≠","8":"‡ßÆ","9":"‡ßØ" };
  return str.toString().split("").map(c => map[c] !== undefined ? map[c] : c).join("");
}

async function sendTimeUpdate(api, threadID) {
  try {
    const now = moment().tz("Asia/Dhaka");

    const engDate = now.format("dddd, DD MMMM YYYY");
    const engTime = now.format("hh:mm A");

    const bnDayName = banglaDays[now.day()];
    const bnDate = now.date();
    const bnMonth = banglaMonths[now.month()];
    const bnYear = now.year() - 593;  // ‡¶¨‡¶ô‡ßç‡¶ó‡¶æ‡¶¨‡ßç‡¶¶ ‡¶¨‡¶õ‡¶∞
    // Bangla time (hh A) but convert numerals
    const bnTime = now.locale("bn").format("hh A");
    const bnTimeBangla = toBanglaNumber(bnTime);

    const hour = now.hour();
    let bnTimePeriod;
    if (hour >= 4 && hour < 12) bnTimePeriod = "‡¶∏‡¶ï‡¶æ‡¶≤";
    else if (hour >= 12 && hour < 17) bnTimePeriod = "‡¶¶‡ßÅ‡¶™‡ßÅ‡¶∞";
    else if (hour >= 17 && hour < 20) bnTimePeriod = "‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤";
    else bnTimePeriod = "‡¶∞‡¶æ‡¶§";

    const today = now.format("DD-MM-YYYY");
    let hijriDay, hijriMonth, hijriYear;
    try {
      const res = await axios.get(`http://api.aladhan.com/v1/gToH?date=${today}`);
      if (res.data && res.data.data && res.data.data.hijri) {
        const h = res.data.data.hijri;
        hijriDay = toBanglaNumber(h.day);
        // h.month.ar is Arabic month name (in Arabic script). ‡¶Ø‡¶¶‡¶ø ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶ö‡¶æ‡¶® ‡¶§‡¶æ‡¶π‡¶≤‡ßá h.month.en
        hijriMonth = h.month.en || h.month.ar;
        hijriYear = toBanglaNumber(h.year);
      } else {
        hijriDay = hijriMonth = hijriYear = "N/A";
      }
    } catch (err) {
      hijriDay = hijriMonth = hijriYear = "Error";
      console.error("Hijri API Error:", err.message);
    }

    const message = `
‚ïî‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ïó
 ‚è∞ ùóßùóúùó†ùóò & ùóóùóîùóßùóò ‚è∞
‚ïö‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ùñ‚ïê‚ïù
       ‚ïî‚ïê‚ú™‚ïêüïí‚ïê‚ú™‚ïê‚ïó
          ‡¶∏‡¶Æ‡ßü: ${bnTimePeriod} ${bnTimeBangla} ‡¶ü‡¶æ
       ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
üóìÔ∏è English: ${engDate}
üóìÔ∏è ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: ${bnDayName}, ${toBanglaNumber(bnDate)} ${bnMonth}, ${toBanglaNumber(bnYear)} ‡¶¨‡¶ô‡ßç‡¶ó‡¶æ‡¶¨‡ßç‡¶¶
üåô ‡¶π‡¶ø‡¶ú‡¶∞‡¶ø: ${hijriDay} ${hijriMonth} ${hijriYear} ‡¶π‡¶ø‡¶ú‡¶∞‡¶ø
üåç ‡¶ü‡¶æ‡¶á‡¶Æ‡¶ú‡ßã‡¶®: Asia/Dhaka
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú® ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶∞ ‡¶®‡¶ø‡¶ï‡¶ü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¶‡ßã‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®..! 
üôè ‡ß´ ‡¶ì‡ßü‡¶æ‡¶ï‡ßç‡¶§ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶®‡¶ø‡ßü‡¶Æ‡¶ø‡¶§ ‡¶™‡ßú‡ßÅ‡¶®..!
ü§ù ‡¶∏‡¶ï‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶¶‡ßç‡¶≠‡¶æ‡¶¨ ‡¶¨‡¶ú‡¶æ‡ßü ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®..!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üå∏‚ú®üåôüïäÔ∏èüåºüåøüïåüíñüåôüå∏‚ú®üå∫

üåü ùêÇùê´ùêûùêöùê≠ùê®ùê´ ‚îÅ ùêíùêöùê¢ùê´ùêÆùê• ùêàùê¨ùê•ùêöùê¶ üåü
`.trim();

    // ‡¶™‡¶æ‡¶†‡¶æ‡¶ì ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
    api.sendMessage(message, threadID);

  } catch (err) {
    console.error("AutoTime Error:", err);
  }
}

module.exports.onLoad = function ({ api }) {
  console.log("‚úÖ AutoTime module loaded.");

  // ‡¶Ø‡¶¶‡¶ø global.data.allThreadIDs ‡¶•‡¶æ‡¶ï‡ßá
  if (global.data && global.data.allThreadIDs) {
    global.data.allThreadIDs.forEach(threadID => {
      // ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≤‡ßç‡¶Ø‡¶æ‡¶™ ‡¶è‡¶°‡¶º‡¶æ‡¶ì
      if (timers[threadID]) return;

      const now = moment().tz("Asia/Dhaka");
      const nextHour = moment(now).add(1, "hour").startOf("hour");
      const msUntilNextHour = nextHour.diff(now);

      // ‡¶è‡¶ï‡¶ü‡¶ø timeout ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßã
      timers[threadID] = true;

      setTimeout(() => {
        sendTimeUpdate(api, threadID);

        // ‡¶è‡¶∞‡¶™‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶Ø‡¶º
        timers[threadID] = setInterval(() => {
          sendTimeUpdate(api, threadID);
        }, 60 * 60 * 1000);

      }, msUntilNextHour);
    });
  }
};

module.exports.run = async function ({ api, event }) {
  // ‡¶ö‡¶æ‡¶≤‡¶ø‡ßü‡ßá ‡¶¶‡¶æ‡¶ì ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶≤‡¶ø
  sendTimeUpdate(api, event.threadID);
};
