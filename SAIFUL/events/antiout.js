const fs = require("fs-extra");
const path = require("path");
const axios = require("axios");
const Canvas = require("canvas");

module.exports.config = {
  name: "antiout",
  version: "2.0.0",
  credits: "Saiful Islam + CYBER BOT TEAM (Merged & fixed by ChatGPT)",
  description: "Auto add member back if they leave the group, with canvas image and caption",
  eventType: ["log:unsubscribe"],
  dependencies: {
    "canvas": "",
    "axios": "",
    "fs-extra": ""
  }
};

module.exports.run = async function ({ api, event, Users, Threads }) {
  const { threadID, logMessageData, author } = event;
  const leftUser = logMessageData.leftParticipantFbId;

  if (!leftUser) return;

  // üîí Check AntiOut status from thread data
  let data = (await Threads.getData(threadID)).data || {};
  if (data.antiout === false) return;
  if (leftUser === api.getCurrentUserID()) return;

  const threadInfo = await api.getThreadInfo(threadID);
  const groupName = threadInfo.threadName || "Unnamed Group";
  const memberCount = threadInfo.participantIDs.length;
  const userName = (await Users.getNameUser(leftUser)) || "Unknown User";

  const isSelfLeave = author === leftUser;

  // üß© If user left by themselves
  if (isSelfLeave) {
    try {
      // üõë Try to add back the user
      await api.addUserToGroup(leftUser, threadID);

      // üñºÔ∏è Background & Avatar
      const bgURL = "https://i.postimg.cc/rmkVVbsM/r07qxo-R-Download.jpg";
      const avatarURL = `https://graph.facebook.com/${leftUser}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`;

      const cacheDir = path.join(__dirname, "cache");
      fs.ensureDirSync(cacheDir);

      const bgPath = path.join(cacheDir, "bg.jpg");
      const avatarPath = path.join(cacheDir, `avt_${leftUser}.png`);
      const outPath = path.join(cacheDir, `antiout_${leftUser}.png`);

      // üîΩ Download images
      const bgImg = (await axios.get(bgURL, { responseType: "arraybuffer" })).data;
      fs.writeFileSync(bgPath, Buffer.from(bgImg));
      const avatarImg = (await axios.get(avatarURL, { responseType: "arraybuffer" })).data;
      fs.writeFileSync(avatarPath, Buffer.from(avatarImg));

      // üé® Canvas setup
      const canvas = Canvas.createCanvas(800, 500);
      const ctx = canvas.getContext("2d");
      const background = await Canvas.loadImage(bgPath);
      ctx.drawImage(background, 0, 0, canvas.width, canvas.height);

      const avatarSize = 180;
      const avatarX = (canvas.width - avatarSize) / 2;
      const avatarY = 100;

      // Avatar circle border
      ctx.beginPath();
      ctx.arc(avatarX + avatarSize / 2, avatarY + avatarSize / 2, avatarSize / 2 + 8, 0, Math.PI * 2, false);
      ctx.fillStyle = "#fff";
      ctx.fill();

      const avatar = await Canvas.loadImage(avatarPath);
      ctx.save();
      ctx.beginPath();
      ctx.arc(avatarX + avatarSize / 2, avatarY + avatarSize / 2, avatarSize / 2, 0, Math.PI * 2, true);
      ctx.closePath();
      ctx.clip();
      ctx.drawImage(avatar, avatarX, avatarY, avatarSize, avatarSize);
      ctx.restore();

      // üìù Text design
      ctx.textAlign = "center";

      ctx.font = "bold 36px Arial";
      ctx.fillStyle = "#FF4500";
      ctx.fillText("üòé ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü‡¶ø-‡¶Ü‡¶â‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø‡¶≠ üòé", canvas.width / 2, 70);

      ctx.font = "bold 34px Arial";
      ctx.fillStyle = "#00FFFF";
      ctx.fillText(userName, canvas.width / 2, avatarY + avatarSize + 50);

      ctx.font = "bold 28px Arial";
      ctx.fillStyle = "#FFFF00";
      ctx.fillText(`‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡¶æ‡¶≤‡¶æ‡¶§‡ßá ‡¶ö‡ßá‡ßü‡ßá‡¶õ‡¶ø‡¶≤‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ${groupName} ‡¶õ‡¶æ‡ßú‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ üòú`, canvas.width / 2, avatarY + avatarSize + 100);

      const caption = "üòÇ ‡¶™‡¶æ‡¶≤‡¶ø‡ßü‡ßá ‡¶≤‡¶æ‡¶≠ ‡¶®‡¶æ‡¶á ‡¶≠‡¶æ‡¶á! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶´‡¶ø‡¶∞‡¶æ‡¶á ‡¶Ü‡¶®‡¶õ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞‡ßá üòà";

      ctx.font = "bold 24px Arial";
      ctx.fillStyle = "#FF69B4";
      ctx.fillText(caption, canvas.width / 2, canvas.height - 60);

      ctx.font = "bold 22px Arial";
      ctx.fillStyle = "#00FF7F";
      ctx.fillText(`üëë Bot Owner: Saiful Islam üíª`, canvas.width / 2, canvas.height - 25);

      const buffer = canvas.toBuffer();
      fs.writeFileSync(outPath, buffer);

      // üí¨ Message
      const message = {
        body:
          `üö® @${userName} ‡¶™‡¶æ‡¶≤‡¶ø‡ßü‡ßá ‡¶ó‡¶ø‡ßü‡ßá‡¶õ‡¶ø‡¶≤!\n` +
          `‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ AntiOut ‡¶§‡¶æ‡¶ï‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ü‡ßá‡¶®‡ßá ‡¶Ü‡¶®‡¶≤‡ßã üòà\n\n` +
          `üè∑Ô∏è Group: ${groupName}\n` +
          `üî¢ Member count: ${memberCount}\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
          `üòÇ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶∂‡¶®: "${caption}"\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
          `üëë Bot Owner: Saiful Islam üíª`,
        mentions: [{ tag: `@${userName}`, id: leftUser }],
        attachment: fs.createReadStream(outPath)
      };

      api.sendMessage(message, threadID, () => {
        if (fs.existsSync(bgPath)) fs.unlinkSync(bgPath);
        if (fs.existsSync(avatarPath)) fs.unlinkSync(avatarPath);
        if (fs.existsSync(outPath)) fs.unlinkSync(outPath);
      });

    } catch (error) {
      console.error("‚ùå AntiOut AddUser Error:", error);
      api.sendMessage(
        `‚öôÔ∏è ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§ ‡¶¨‡¶∏, ${userName} ‡¶ï‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ üòî\n‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§:\n‚Ä¢ ‡¶â‡¶®‡¶ø ‡¶¨‡¶ü‡¶ï‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá‡¶õ‡ßá\n‚Ä¢ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶∏‡¶ø ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶è‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ\n‚Ä¢ ‡¶Ö‡¶•‡¶¨‡¶æ Facebook ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß‡¶§‡¶æ ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá\n\nüß© ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ Error:\n${error.message}`,
        threadID
      );
    }
  } else {
    // üß† Someone else removed the user
    const name =
      global.data.userName.get(leftUser) ||
      (await Users.getNameUser(leftUser)) ||
      "Unknown User";
    api.sendMessage(
      `‚ö†Ô∏è ${name} ‡¶ï‡ßá ‡¶ï‡ßá‡¶â ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá!\n‡¶ï‡ßá ‡¶™‡ßá‡¶õ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶æ‡¶• ‡¶Æ‡¶æ‡¶∞‡¶õ‡ßá ‡¶Æ‡¶®‡ßá ‡¶π‡ßü üòè`,
      threadID
    );
  }
};
